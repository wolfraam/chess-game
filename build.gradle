plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.0")
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Publishing:
publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.wolfraam'
            artifactId = 'chessgame'
            version = System.getenv("GITHUB_REF_NAME")

            from components.java
            pom {
                name = 'chess-game'
                description = 'a java chess library'
                url = 'https://github.com/wolfraam/chess-game/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/wolfraam/chess-game/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'wolfraam'
                        name = 'Wolfraam'
                        email = 'wolfraam@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wolfraam/chess-game/'
                    developerConnection = 'scm:git:ssh://github.com/wolfraam/chess-game/'
                    url = 'http://github.com/wolfraam/chess-game/'
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    sign publishing.publications.mavenJava
}

// Tests:
test {
    useJUnitPlatform()
}

jacocoBadgeGenSetting {
    jacocoReportPath  "$projectDir/build/reports/jacoco/test/jacocoTestReport.xml"
    readmePath "$projectDir/README.md"
    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}

jacocoTestReport {
    dependsOn test
}

generateJacocoBadge {
    dependsOn jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}